{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ValidadorFormUsuariosService {\n  // en este servicio se pueden manejar validarciones personalizadas\n  constructor() {}\n  requerido(name) {\n    return control => {\n      const value = control.value?.trim();\n      if (control.dirty) {\n        if (!value || value == '') {\n          return {\n            requiredInput: `${name} requerido`\n          };\n        }\n      }\n      return null;\n    };\n  }\n  email(control) {\n    const value = control.value;\n    let regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n    if (control.dirty) {\n      if (!regex.test(value)) {\n        return {\n          email: `Correo no válido`\n        };\n      }\n    }\n    return null;\n  }\n  minimo(length, label) {\n    return control => {\n      const value = control.value;\n      if (control.dirty) {\n        if (value.length < length) {\n          return {\n            minLength: `${label} debe tener ${length} carácteres`\n          };\n        }\n      }\n      return null;\n    };\n  }\n  telefono(numero) {\n    return control => {\n      const value = control.value;\n      console.log(value);\n      if (control.dirty) {\n        if (/[0-9]/i.test(numero) && numero.length > 9) {\n          return true;\n        }\n      }\n      return null;\n    };\n  }\n}\nValidadorFormUsuariosService.ɵfac = function ValidadorFormUsuariosService_Factory(t) {\n  return new (t || ValidadorFormUsuariosService)();\n};\nValidadorFormUsuariosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ValidadorFormUsuariosService,\n  factory: ValidadorFormUsuariosService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,4BAA4B;EAEvC;EACAC,eAAgB;EAEhBC,SAAS,CAACC,IAAY;IACpB,OAAQC,OAAoB,IAAI;MAC9B,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK,EAAEC,IAAI,EAAE;MACnC,IAAIF,OAAO,CAACG,KAAK,EAAE;QACjB,IAAI,CAACF,KAAK,IAAIA,KAAK,IAAI,EAAE,EAAE;UACzB,OAAO;YACLG,aAAa,EAAE,GAAGL,IAAI;WACvB;;;MAGL,OAAO,IAAI;IACb,CAAC;EACH;EAEAM,KAAK,CAACL,OAAoB;IACxB,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAIK,KAAK,GAAW,0CAA0C;IAC9D,IAAIN,OAAO,CAACG,KAAK,EAAE;MACjB,IAAI,CAACG,KAAK,CAACC,IAAI,CAACN,KAAK,CAAC,EAAE;QACtB,OAAO;UACLI,KAAK,EAAE;SACR;;;IAGL,OAAO,IAAI;EACb;EAEAG,MAAM,CAACC,MAAc,EAAEC,KAAa;IAClC,OAAQV,OAAoB,IAAI;MAC9B,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;MAC3B,IAAID,OAAO,CAACG,KAAK,EAAE;QACjB,IAAIF,KAAK,CAACQ,MAAM,GAAGA,MAAM,EAAE;UACzB,OAAO;YACLE,SAAS,EAAE,GAAGD,KAAK,eAAeD,MAAM;WACzC;;;MAGL,OAAO,IAAI;IACb,CAAC;EACH;EAEOG,QAAQ,CAACC,MAAc;IAE5B,OAAQb,OAAoB,IAAI;MAC9B,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;MAC3Ba,OAAO,CAACC,GAAG,CAACd,KAAK,CAAC;MAElB,IAAID,OAAO,CAACG,KAAK,EAAE;QACjB,IAAI,QAAQ,CAACI,IAAI,CAACM,MAAM,CAAC,IAAIA,MAAM,CAACJ,MAAM,GAAG,CAAC,EAAE;UAC9C,OAAO,IAAI;;;MAGf,OAAO,IAAI;IACb,CAAC;EAEH;;AA5DWb,4BAA4B;mBAA5BA,4BAA4B;AAAA;AAA5BA,4BAA4B;SAA5BA,4BAA4B;EAAAoB,SAA5BpB,4BAA4B;EAAAqB,YAF3B;AAAM","names":["ValidadorFormUsuariosService","constructor","requerido","name","control","value","trim","dirty","requiredInput","email","regex","test","minimo","length","label","minLength","telefono","numero","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Usuario\\Documents\\Reni\\reni_lopez_orias\\my-app\\src\\app\\core\\validador-form-usuarios\\validador-form-usuarios.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidadorFormUsuariosService {\n\n  // en este servicio se pueden manejar validarciones personalizadas\n  constructor() { }\n\n  requerido(name: string) {\n    return (control: FormControl) => {\n      const value = control.value?.trim();\n      if (control.dirty) {\n        if (!value || value == '') {\n          return {\n            requiredInput: `${name} requerido`\n          };\n        }\n      }\n      return null;\n    };\n  }\n\n  email(control: FormControl) { \n    const value = control.value;\n    let regex: RegExp = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n    if (control.dirty) { \n      if (!regex.test(value)) { \n        return {\n          email: `Correo no válido`\n        };\n      }\n    }\n    return null; \n  }\n\n  minimo(length: number, label: string) {\n    return (control: FormControl) => {\n      const value = control.value;\n      if (control.dirty) {\n        if (value.length < length) {\n          return {\n            minLength: `${label} debe tener ${length} carácteres`\n          };\n        }\n      }\n      return null;\n    };\n  }\n\n  public telefono(numero: string){\n\n    return (control: FormControl) => {\n      const value = control.value;\n      console.log(value);\n      \n      if (control.dirty) {\n        if (/[0-9]/i.test(numero) && numero.length > 9) {\n          return true;\n        }\n      }\n      return null;\n    };\n\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}