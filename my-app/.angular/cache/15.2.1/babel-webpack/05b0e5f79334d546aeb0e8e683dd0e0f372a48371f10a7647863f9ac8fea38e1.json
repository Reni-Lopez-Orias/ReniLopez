{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Acciones, CodigosRespuesta } from \"../../core/enums/codigo-respuesta\";\nimport Swal from 'sweetalert2';\nlet UsuariosComponent = class UsuariosComponent {\n  constructor(_paisesService, _fb, _validadorFormUsuariosService, _spinnerService, _usuarioService) {\n    this._paisesService = _paisesService;\n    this._fb = _fb;\n    this._validadorFormUsuariosService = _validadorFormUsuariosService;\n    this._spinnerService = _spinnerService;\n    this._usuarioService = _usuarioService;\n    this.spinner = true;\n    this.paises = new Array();\n    this.fecha = \"\";\n    this.usuarios = new Array();\n    this.userForm = this._fb.group({\n      id: [null],\n      nombre: ['reni', [Validators.required, this._validadorFormUsuariosService.requerido('Nombre'), this._validadorFormUsuariosService.minimo(3, 'Nombre')]],\n      apellido: ['reni', [Validators.required, this._validadorFormUsuariosService.requerido('Apellido'), this._validadorFormUsuariosService.minimo(3, 'Apellido')]],\n      correoElectronico: ['reni@reni.com', [Validators.required, this._validadorFormUsuariosService.requerido('correoElectronico ElectrÃ³nico'), this._validadorFormUsuariosService.email]],\n      fechaNacimiento: ['2023/4/02', [Validators.required, this._validadorFormUsuariosService.requerido('Fecha Nacimiento')]],\n      telefono: ['', [Validators.maxLength(8)]],\n      paisResidencia: ['CRC', [Validators.required]],\n      contacto: [false, [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    this.obtenerUsuarios();\n    this.formatoFechaForm();\n    this.getSpinner();\n    this.getPaises();\n  }\n  obtenerUsuarios() {\n    this._usuarioService.obtenerUsuarios().subscribe(response => {\n      this.validateResponse(response, Acciones.Ver);\n    });\n  }\n  submitForm() {\n    if (this.userForm.valid) {\n      this.userForm.value.uid ? this.editarUsuario() : this.agregarUsuario();\n    }\n  }\n  agregarUsuario() {\n    let usuario = this.userForm.value;\n    this._usuarioService.agregarUsuario(usuario).subscribe(response => {\n      this.validateResponse(response, Acciones.Agregar);\n    });\n  }\n  editarUsuario() {\n    let usuario = this.userForm.value;\n    this._usuarioService.agregarUsuario(usuario).subscribe(response => {\n      this.validateResponse(response, Acciones.Editar);\n    });\n  }\n  validateResponse(response, action) {\n    var agregar = Acciones.Agregar == action && \"Agregado\";\n    var editar = Acciones.Editar == action && \"Editado\";\n    var eliminar = Acciones.Eliminar == action && \"Eliminado\";\n    if (action == Acciones.Ver) {\n      this.usuarios = response.respuesta;\n    }\n    if (response.codigoRespuesta == CodigosRespuesta.Exito) {\n      if (agregar) {\n        Swal.fire(`${agregar} Correctamente!`, 'You clicked the button!', 'success');\n      }\n      if (editar) {\n        Swal.fire(`${editar} Correctamente!`, 'You clicked the button!', 'success');\n      }\n      if (eliminar) {\n        Swal.fire(`${eliminar} Correctamente!`, 'You clicked the button!', 'success');\n      }\n    } else {}\n  }\n  formatoFechaForm() {\n    var fechaTemp = new Date().toISOString();\n    this.fecha = fechaTemp.toString().slice(0, -14);\n  }\n  getSpinner() {\n    this._spinnerService.spinner$.subscribe(data => {\n      this.spinner = data;\n    });\n  }\n  getPaises() {\n    this._paisesService.getPaises().subscribe(data => {\n      this.paises = data;\n      this.paises.sort((x, y) => x.nombre.localeCompare(y.nombre));\n      // tiempo para ver loading\n      setTimeout(() => {\n        this._spinnerService.spinner$.emit(false);\n        this.spinner = false;\n      }, 1000);\n    });\n  }\n  customResetForm() {\n    this.userForm.reset({\n      id: null,\n      nombre: '',\n      apellido: '',\n      correoElectronico: '',\n      fechaNacimiento: '',\n      telefono: '',\n      paisResidencia: '',\n      contacto: false\n    });\n  }\n  validarTelefono(event) {\n    let patt = /^([0-9])$/;\n    return patt.test(event.key);\n  }\n};\nUsuariosComponent = __decorate([Component({\n  selector: 'app-usuarios',\n  templateUrl: './usuarios.component.html',\n  styleUrls: ['./usuarios.component.css']\n})], UsuariosComponent);\nexport { UsuariosComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","Acciones","CodigosRespuesta","Swal","UsuariosComponent","constructor","_paisesService","_fb","_validadorFormUsuariosService","_spinnerService","_usuarioService","Array","userForm","group","id","nombre","required","requerido","minimo","apellido","correoElectronico","email","fechaNacimiento","telefono","maxLength","paisResidencia","contacto","ngOnInit","obtenerUsuarios","formatoFechaForm","getSpinner","getPaises","subscribe","response","validateResponse","Ver","submitForm","valid","value","uid","editarUsuario","agregarUsuario","usuario","Agregar","Editar","action","agregar","editar","eliminar","Eliminar","usuarios","respuesta","codigoRespuesta","Exito","fire","fechaTemp","Date","toISOString","fecha","toString","slice","spinner$","data","spinner","paises","sort","x","y","localeCompare","setTimeout","emit","customResetForm","reset","validarTelefono","event","patt","test","key","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Usuario\\Documents\\Reni\\reni_lopez_orias\\my-app\\src\\app\\components\\usuarios\\usuarios.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { PaisModel } from 'src/app/core/models/Pais.model';\nimport { RespuestUsuariosInterface } from 'src/app/core/models/RespuestaUsuarios.interface';\nimport { PaisesService } from 'src/app/core/services/paises/paises.service';\nimport { SpinnerService } from 'src/app/core/services/spinner/spinner.service';\nimport { UsuariosService } from 'src/app/core/services/usuarios/usuarios.service';\nimport { ValidadorFormUsuariosService } from 'src/app/core/services/validador-form-usuarios/validador-form-usuarios.service';\nimport { Acciones, CodigosRespuesta } from \"../../core/enums/codigo-respuesta\";\nimport Swal from 'sweetalert2'\nimport { UsuarioInterface } from 'src/app/core/models/Usuario.interface';\n\n@Component({\n  selector: 'app-usuarios',\n  templateUrl: './usuarios.component.html',\n  styleUrls: ['./usuarios.component.css']\n})\nexport class UsuariosComponent implements OnInit {\n\n  spinner: boolean = true;\n  userForm: FormGroup;\n  paises: Array<PaisModel> = new Array<PaisModel>();\n  fecha: string = \"\";\n  usuarios: Array<UsuarioInterface> = new Array<UsuarioInterface>();\n\n  public constructor(\n    private _paisesService: PaisesService,\n    private _fb: FormBuilder,\n    private _validadorFormUsuariosService: ValidadorFormUsuariosService,\n    public _spinnerService: SpinnerService,\n    private _usuarioService: UsuariosService\n  ) {\n\n    this.userForm = this._fb.group({\n      id: [null],\n      nombre: ['reni', [Validators.required, this._validadorFormUsuariosService.requerido('Nombre'), this._validadorFormUsuariosService.minimo(3, 'Nombre')]],\n      apellido: ['reni', [Validators.required, this._validadorFormUsuariosService.requerido('Apellido'), this._validadorFormUsuariosService.minimo(3, 'Apellido')]],\n      correoElectronico: ['reni@reni.com', [Validators.required, this._validadorFormUsuariosService.requerido('correoElectronico ElectrÃ³nico'), this._validadorFormUsuariosService.email]],\n      fechaNacimiento: ['2023/4/02', [Validators.required, this._validadorFormUsuariosService.requerido('Fecha Nacimiento')]],\n      telefono: ['', [Validators.maxLength(8)]],\n      paisResidencia: ['CRC', [Validators.required]],\n      contacto: [false, [Validators.required]],\n    });\n\n  }\n  \n  ngOnInit() {\n    this.obtenerUsuarios();\n    this.formatoFechaForm();\n    this.getSpinner();\n    this.getPaises(); \n  }\n\n  obtenerUsuarios(){\n    this._usuarioService.obtenerUsuarios().subscribe(response => { \n      this.validateResponse(response,Acciones.Ver); \n    })\n  }\n\n  submitForm() {\n    if (this.userForm.valid) {\n      (this.userForm.value.uid) ? this.editarUsuario() : this.agregarUsuario();\n    }\n  }\n\n  agregarUsuario() {\n    let usuario = this.userForm.value;\n\n    this._usuarioService.agregarUsuario(usuario).subscribe((response: any) => {\n      this.validateResponse(response, Acciones.Agregar);\n    })\n\n  }\n\n  editarUsuario() {\n    let usuario = this.userForm.value;\n    this._usuarioService.agregarUsuario(usuario).subscribe((response: any) => {\n      this.validateResponse(response, Acciones.Editar);\n    })\n  }\n\n  validateResponse(response: RespuestUsuariosInterface, action: number) {\n\n    var agregar = Acciones.Agregar == action && \"Agregado\";\n    var editar = Acciones.Editar == action && \"Editado\";\n    var eliminar = Acciones.Eliminar == action && \"Eliminado\";\n\n    if (action == Acciones.Ver) {\n      this.usuarios = response.respuesta\n    }\n\n    if (response.codigoRespuesta == CodigosRespuesta.Exito) {\n\n      if (agregar) {\n        Swal.fire(\n          `${agregar} Correctamente!`,\n          'You clicked the button!',\n          'success'\n        )\n      }\n      if (editar) {\n        Swal.fire(\n          `${editar} Correctamente!`,\n          'You clicked the button!',\n          'success'\n        )\n      }\n      if (eliminar) {\n        Swal.fire(\n          `${eliminar} Correctamente!`,\n          'You clicked the button!',\n          'success'\n        )\n      }\n\n     \n    } else {\n\n    }\n\n  }\n\n  formatoFechaForm() {\n    var fechaTemp = new Date().toISOString();\n    this.fecha = fechaTemp.toString().slice(0, -14);\n  }\n\n\n  getSpinner() {\n    this._spinnerService.spinner$.subscribe(data => {\n      this.spinner = data;\n    })\n  }\n\n  getPaises() {\n\n    this._paisesService.getPaises().subscribe((data: PaisModel[]) => {\n      this.paises = data;\n      this.paises.sort((x, y) => x.nombre.localeCompare(y.nombre));\n\n      // tiempo para ver loading\n      setTimeout(() => {\n        this._spinnerService.spinner$.emit(false);\n        this.spinner = false;\n      }, 1000);\n    })\n  }\n\n \n\n  customResetForm() {\n    this.userForm.reset({\n      id: null,\n      nombre: '',\n      apellido: '',\n      correoElectronico: '',\n      fechaNacimiento: '',\n      telefono: '',\n      paisResidencia: '',\n      contacto: false,\n    });\n  }\n\n  validarTelefono(event: any) {\n    let patt = /^([0-9])$/;\n    return patt.test(event.key);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}