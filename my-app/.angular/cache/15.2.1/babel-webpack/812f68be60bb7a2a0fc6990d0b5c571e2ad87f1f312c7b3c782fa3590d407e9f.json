{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ValidadorFormUsuariosService {\n  // en este servicio se pueden manejar validarciones personalizadas\n  constructor() {}\n  required(name = \"\") {\n    return control => {\n      const value = control.value;\n      if (!value || value == '') {\n        return {\n          required: `The ${name} is required`\n        };\n      }\n      return null;\n    };\n  }\n  email(control) {\n    const value = control.value;\n    let regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n    if (!regex.test(value)) {\n      return {\n        email: `Email is not valid`\n      };\n    }\n    return null;\n  }\n  minLength(length) {\n    return control => {\n      const value = control.value;\n      if (value.length < length) {\n        return {\n          minLength: `Must have 8 character`\n        };\n      }\n      return null;\n    };\n  }\n  minimo(length, label) {\n    return control => {\n      const value = control.value;\n      if (control.dirty) {\n        if (value.length < length) {\n          return {\n            minLength: `${label} debe tener ${length} carácteres`\n          };\n        }\n      }\n      return null;\n    };\n  }\n}\nValidadorFormUsuariosService.ɵfac = function ValidadorFormUsuariosService_Factory(t) {\n  return new (t || ValidadorFormUsuariosService)();\n};\nValidadorFormUsuariosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ValidadorFormUsuariosService,\n  factory: ValidadorFormUsuariosService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,4BAA4B;EAEvC;EACAC,eAAgB;EAEhBC,QAAQ,CAACC,OAAe,EAAE;IACxB,OAAQC,OAAoB,IAAI;MAC9B,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;MAC3B,IAAI,CAACA,KAAK,IAAIA,KAAK,IAAI,EAAE,EAAE;QACzB,OAAO;UACLH,QAAQ,EAAE,OAAOC,IAAI;SACtB;;MAEH,OAAO,IAAI;IACb,CAAC;EACH;EAEAG,KAAK,CAACF,OAAoB;IAExB,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAIE,KAAK,GAAW,0CAA0C;IAE9D,IAAI,CAACA,KAAK,CAACC,IAAI,CAACH,KAAK,CAAC,EAAE;MACtB,OAAO;QACLC,KAAK,EAAE;OACR;;IAEH,OAAO,IAAI;EAEb;EAEAG,SAAS,CAACC,MAAc;IACtB,OAAQN,OAAoB,IAAI;MAC9B,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;MAC3B,IAAIA,KAAK,CAACK,MAAM,GAAGA,MAAM,EAAE;QACzB,OAAO;UACLD,SAAS,EAAE;SACZ;;MAEH,OAAO,IAAI;IACb,CAAC;EACH;EACAE,MAAM,CAACD,MAAc,EAAEE,KAAa;IAClC,OAAQR,OAAoB,IAAI;MAC9B,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;MAC3B,IAAID,OAAO,CAACS,KAAK,EAAE;QACjB,IAAIR,KAAK,CAACK,MAAM,GAAGA,MAAM,EAAE;UACzB,OAAO;YACLD,SAAS,EAAE,GAAGG,KAAK,eAAeF,MAAM;WACzC;;;MAGL,OAAO,IAAI;IACb,CAAC;EACH;;AAtDWV,4BAA4B;mBAA5BA,4BAA4B;AAAA;AAA5BA,4BAA4B;SAA5BA,4BAA4B;EAAAc,SAA5Bd,4BAA4B;EAAAe,YAF3B;AAAM","names":["ValidadorFormUsuariosService","constructor","required","name","control","value","email","regex","test","minLength","length","minimo","label","dirty","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Usuario\\Documents\\Reni\\reni_lopez_orias\\my-app\\src\\app\\core\\services\\validador-form-usuarios\\validador-form-usuarios.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidadorFormUsuariosService {\n\n  // en este servicio se pueden manejar validarciones personalizadas\n  constructor() { }\n\n  required(name: string = \"\") {\n    return (control: FormControl) => {\n      const value = control.value;\n      if (!value || value == '') {\n        return {\n          required: `The ${name} is required`\n        };\n      }\n      return null;\n    };\n  }\n\n  email(control: FormControl) {\n\n    const value = control.value;\n    let regex: RegExp = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n\n    if (!regex.test(value)) {\n      return {\n        email: `Email is not valid`\n      };\n    }\n    return null;\n\n  }\n\n  minLength(length: number) {\n    return (control: FormControl) => {\n      const value = control.value;\n      if (value.length < length) {\n        return {\n          minLength: `Must have 8 character`\n        };\n      }\n      return null;\n    };\n  }\n  minimo(length: number, label: string) {\n    return (control: FormControl) => {\n      const value = control.value;\n      if (control.dirty) {\n        if (value.length < length) {\n          return {\n            minLength: `${label} debe tener ${length} carácteres`\n          };\n        }\n      }\n      return null;\n    };\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}