{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ValidadorFormUsuariosService {\n  constructor() {}\n  requiredInput(name) {\n    return control => {\n      const value = control.value?.trim();\n      if (control.dirty) {\n        if (!value || value == '') {\n          return {\n            requiredInput: `The ${name} is required`\n          };\n        }\n      }\n      return null;\n    };\n  }\n  email(control) {\n    const value = control.value;\n    let regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n    if (control.dirty) {\n      if (!regex.test(value)) {\n        return {\n          email: `The Email is not valid`\n        };\n      }\n    }\n    return null;\n  }\n  minLength(length, label) {\n    return control => {\n      const value = control.value;\n      if (control.dirty) {\n        if (value.length < length) {\n          return {\n            minLength: `The ${label} must have ${length} character`\n          };\n        }\n      }\n      return null;\n    };\n  }\n}\nValidadorFormUsuariosService.ɵfac = function ValidadorFormUsuariosService_Factory(t) {\n  return new (t || ValidadorFormUsuariosService)();\n};\nValidadorFormUsuariosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ValidadorFormUsuariosService,\n  factory: ValidadorFormUsuariosService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,4BAA4B;EAEvCC,eAAgB;EAEhBC,aAAa,CAACC,IAAY;IACxB,OAAQC,OAAoB,IAAI;MAC9B,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK,EAAEC,IAAI,EAAE;MACnC,IAAIF,OAAO,CAACG,KAAK,EAAE;QACjB,IAAI,CAACF,KAAK,IAAIA,KAAK,IAAI,EAAE,EAAE;UACzB,OAAO;YACLH,aAAa,EAAE,OAAOC,IAAI;WAC3B;;;MAGL,OAAO,IAAI;IACb,CAAC;EACH;EAEAK,KAAK,CAACJ,OAAoB;IACxB,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAII,KAAK,GAAW,0CAA0C;IAC9D,IAAIL,OAAO,CAACG,KAAK,EAAE;MACjB,IAAI,CAACE,KAAK,CAACC,IAAI,CAACL,KAAK,CAAC,EAAE;QACtB,OAAO;UACLG,KAAK,EAAE;SACR;;;IAGL,OAAO,IAAI;EACb;EAEAG,SAAS,CAACC,MAAc,EAAEC,KAAa;IACrC,OAAQT,OAAoB,IAAI;MAC9B,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;MAC3B,IAAID,OAAO,CAACG,KAAK,EAAE;QACjB,IAAIF,KAAK,CAACO,MAAM,GAAGA,MAAM,EAAE;UACzB,OAAO;YACLD,SAAS,EAAE,OAAOE,KAAK,cAAcD,MAAM;WAC5C;;;MAGL,OAAO,IAAI;IACb,CAAC;EACH;;AA3CWZ,4BAA4B;mBAA5BA,4BAA4B;AAAA;AAA5BA,4BAA4B;SAA5BA,4BAA4B;EAAAc,SAA5Bd,4BAA4B;EAAAe,YAF3B;AAAM","names":["ValidadorFormUsuariosService","constructor","requiredInput","name","control","value","trim","dirty","email","regex","test","minLength","length","label","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Usuario\\Documents\\Reni\\reni_lopez_orias\\my-app\\src\\app\\core\\validador-form-usuarios\\validador-form-usuarios.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidadorFormUsuariosService {\n\n  constructor() { }\n\n  requiredInput(name: string) {\n    return (control: FormControl) => {\n      const value = control.value?.trim();\n      if (control.dirty) {\n        if (!value || value == '') {\n          return {\n            requiredInput: `The ${name} is required`\n          };\n        }\n      }\n      return null;\n    };\n  }\n\n  email(control: FormControl) { \n    const value = control.value;\n    let regex: RegExp = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n    if (control.dirty) { \n      if (!regex.test(value)) { \n        return {\n          email: `The Email is not valid`\n        };\n      }\n    }\n    return null; \n  }\n\n  minLength(length: number, label: string) {\n    return (control: FormControl) => {\n      const value = control.value;\n      if (control.dirty) {\n        if (value.length < length) {\n          return {\n            minLength: `The ${label} must have ${length} character`\n          };\n        }\n      }\n      return null;\n    };\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}