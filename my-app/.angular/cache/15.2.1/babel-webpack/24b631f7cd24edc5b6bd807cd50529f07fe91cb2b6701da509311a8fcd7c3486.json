{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ValidadorFormUsuariosService {\n  constructor() {}\n  requerido(name) {\n    return control => {\n      const value = control.value?.trim();\n      if (control.dirty) {\n        if (!value || value == '') {\n          return {\n            requiredInput: `Campo requerido`\n          };\n        }\n      }\n      return null;\n    };\n  }\n  email(control) {\n    const value = control.value;\n    let regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n    if (control.dirty) {\n      if (!regex.test(value)) {\n        return {\n          email: `Correo no válido`\n        };\n      }\n    }\n    return null;\n  }\n  minimo(length, label) {\n    return control => {\n      const value = control.value;\n      if (control.dirty) {\n        if (value.length < length) {\n          return {\n            minLength: `The ${label} must have ${length} character`\n          };\n        }\n      }\n      return null;\n    };\n  }\n  soloLetras(length, label) {\n    return control => {\n      const value = control.value;\n      let regex = /^[A-Z]+$/i;\n      if (control.dirty) {\n        if (!regex.test(value)) {\n          return {\n            minLength: `${label} debe tener ${length}`\n          };\n        }\n      }\n      return null;\n    };\n  }\n}\nValidadorFormUsuariosService.ɵfac = function ValidadorFormUsuariosService_Factory(t) {\n  return new (t || ValidadorFormUsuariosService)();\n};\nValidadorFormUsuariosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ValidadorFormUsuariosService,\n  factory: ValidadorFormUsuariosService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,4BAA4B;EAEvCC,eAAgB;EAEhBC,SAAS,CAACC,IAAY;IACpB,OAAQC,OAAoB,IAAI;MAC9B,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK,EAAEC,IAAI,EAAE;MACnC,IAAIF,OAAO,CAACG,KAAK,EAAE;QACjB,IAAI,CAACF,KAAK,IAAIA,KAAK,IAAI,EAAE,EAAE;UACzB,OAAO;YACLG,aAAa,EAAE;WAChB;;;MAGL,OAAO,IAAI;IACb,CAAC;EACH;EAEAC,KAAK,CAACL,OAAoB;IACxB,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;IAC3B,IAAIK,KAAK,GAAW,0CAA0C;IAC9D,IAAIN,OAAO,CAACG,KAAK,EAAE;MACjB,IAAI,CAACG,KAAK,CAACC,IAAI,CAACN,KAAK,CAAC,EAAE;QACtB,OAAO;UACLI,KAAK,EAAE;SACR;;;IAGL,OAAO,IAAI;EACb;EAEAG,MAAM,CAACC,MAAc,EAAEC,KAAa;IAClC,OAAQV,OAAoB,IAAI;MAC9B,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;MAC3B,IAAID,OAAO,CAACG,KAAK,EAAE;QACjB,IAAIF,KAAK,CAACQ,MAAM,GAAGA,MAAM,EAAE;UACzB,OAAO;YACLE,SAAS,EAAE,OAAOD,KAAK,cAAcD,MAAM;WAC5C;;;MAGL,OAAO,IAAI;IACb,CAAC;EACH;EAEAG,UAAU,CAACH,MAAc,EAAEC,KAAa;IACtC,OAAQV,OAAoB,IAAI;MAC9B,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK;MAC3B,IAAIK,KAAK,GAAW,WAAW;MAC/B,IAAIN,OAAO,CAACG,KAAK,EAAE;QACjB,IAAI,CAACG,KAAK,CAACC,IAAI,CAACN,KAAK,CAAC,EAAE;UACtB,OAAO;YACLU,SAAS,EAAE,GAAGD,KAAK,eAAeD,MAAM;WACzC;;;MAGL,OAAO,IAAI;IACb,CAAC;EACH;;AA1DWb,4BAA4B;mBAA5BA,4BAA4B;AAAA;AAA5BA,4BAA4B;SAA5BA,4BAA4B;EAAAiB,SAA5BjB,4BAA4B;EAAAkB,YAF3B;AAAM","names":["ValidadorFormUsuariosService","constructor","requerido","name","control","value","trim","dirty","requiredInput","email","regex","test","minimo","length","label","minLength","soloLetras","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Usuario\\Documents\\Reni\\reni_lopez_orias\\my-app\\src\\app\\core\\validador-form-usuarios\\validador-form-usuarios.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidadorFormUsuariosService {\n\n  constructor() { }\n\n  requerido(name: string) {\n    return (control: FormControl) => {\n      const value = control.value?.trim();\n      if (control.dirty) {\n        if (!value || value == '') {\n          return {\n            requiredInput: `Campo requerido`\n          };\n        }\n      }\n      return null;\n    };\n  }\n\n  email(control: FormControl) { \n    const value = control.value;\n    let regex: RegExp = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n    if (control.dirty) { \n      if (!regex.test(value)) { \n        return {\n          email: `Correo no válido`\n        };\n      }\n    }\n    return null; \n  }\n\n  minimo(length: number, label: string) {\n    return (control: FormControl) => {\n      const value = control.value;\n      if (control.dirty) {\n        if (value.length < length) {\n          return {\n            minLength: `The ${label} must have ${length} character`\n          };\n        }\n      }\n      return null;\n    };\n  }\n\n  soloLetras(length: number, label: string) {\n    return (control: FormControl) => {\n      const value = control.value;\n      let regex: RegExp = /^[A-Z]+$/i;\n      if (control.dirty) {\n        if (!regex.test(value)) {\n          return {\n            minLength: `${label} debe tener ${length}`\n          };\n        }\n      }\n      return null;\n    };\n  }\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}