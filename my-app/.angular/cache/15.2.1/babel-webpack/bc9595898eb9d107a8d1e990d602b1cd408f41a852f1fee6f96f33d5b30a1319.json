{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction MensajeErrorComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.errorMsg, \" \");\n  }\n}\nexport class MensajeErrorComponent {\n  constructor() {\n    this.test = new BehaviorSubject(null);\n    this.errorMsg = \"\";\n    this.messageSource = new BehaviorSubject('default message');\n    this.currentMessage = this.messageSource.asObservable();\n  }\n  ngDoCheck() {\n    //Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.\n    //Add 'implements DoCheck' to the class.\n    // console.log(this.control);\n    this.errorMsg = this.getErrors(this.control);\n  }\n  getErrors(control) {\n    return Object.entries(this.control?.errors ?? {}).map(([key, msg]) => ({\n      key,\n      msg\n    }))[0]?.msg;\n  }\n}\nMensajeErrorComponent.ɵfac = function MensajeErrorComponent_Factory(t) {\n  return new (t || MensajeErrorComponent)();\n};\nMensajeErrorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MensajeErrorComponent,\n  selectors: [[\"app-mensaje-error\"]],\n  inputs: {\n    control: \"control\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"text-danger\"]],\n  template: function MensajeErrorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, MensajeErrorComponent_div_0_Template, 2, 1, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.control && ctx.control.errors && (ctx.control.dirty || ctx.control.touched));\n    }\n  },\n  dependencies: [i1.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAQ,MAAM;;;;;ICFtCC,8BAAiG;IAC7FA,YACA;IAQJA,iBAAM;;;;IATFA,eACA;IADAA,gDACA;;;ADOJ,OAAM,MAAOC,qBAAqB;EAWhCC;IANA,SAAI,GAA0B,IAAIH,eAAe,CAAC,IAAI,CAAC;IACvD,aAAQ,GAAW,EAAE;IAEb,kBAAa,GAAG,IAAIA,eAAe,CAAC,iBAAiB,CAAC;IAC9D,mBAAc,GAAG,IAAI,CAACI,aAAa,CAACC,YAAY,EAAE;EAElC;EAEhBC,SAAS;IACP;IACA;IAEA;IACA,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,SAAS,CAAC,IAAI,CAACC,OAAO,CAAC;EAG9C;EAEAD,SAAS,CAACC,OAA+B;IACvC,OAAOC,MAAM,CAACC,OAAO,CAAC,IAAI,CAACF,OAAO,EAAEG,MAAM,IAAI,EAAE,CAAC,CAC9CC,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,GAAG,CAAgB,MAAM;MAAED,GAAG;MAAEC;IAAG,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,GAAG;EAC/D;;AA1BWb,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAc;EAAAC;IAAAR;EAAA;EAAAS;EAAAC;EAAAC;EAAAC;IAAA;MCTlCpB,sEAUM;;;MAVoBA,sGAAqE","names":["BehaviorSubject","i0","MensajeErrorComponent","constructor","messageSource","asObservable","ngDoCheck","errorMsg","getErrors","control","Object","entries","errors","map","key","msg","selectors","inputs","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Usuario\\Documents\\Reni\\reni_lopez_orias\\my-app\\src\\app\\components\\shared\\mensaje-error\\mensaje-error.component.ts","C:\\Users\\Usuario\\Documents\\Reni\\reni_lopez_orias\\my-app\\src\\app\\components\\shared\\mensaje-error\\mensaje-error.component.html"],"sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\nimport { AbstractControl, ValidationErrors } from '@angular/forms'\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n  selector: 'app-mensaje-error',\n  templateUrl: './mensaje-error.component.html',\n  styleUrls: ['./mensaje-error.component.css']\n})\nexport class MensajeErrorComponent {\n\n\n  @Input(\"control\")\n  control: any;\n  test:  BehaviorSubject<any> = new BehaviorSubject(null);\n  errorMsg: string = \"\";\n  \n  private messageSource = new BehaviorSubject('default message');\n  currentMessage = this.messageSource.asObservable();\n\n  constructor() { }\n\n  ngDoCheck(): void {\n    //Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.\n    //Add 'implements DoCheck' to the class.\n\n    // console.log(this.control);\n    this.errorMsg = this.getErrors(this.control)\n\n\n  }\n\n  getErrors(control: AbstractControl | null): string {  \n    return Object.entries(this.control?.errors ?? {})\n      .map(([key, msg]: [string, any]) => ({ key, msg }))[0]?.msg;\n  }\n\n\n\n}\n","<div class=\"text-danger\" *ngIf=\"control && control.errors && (control.dirty || control.touched)\">\n    {{errorMsg}}\n    <!-- <div *ngIf=\"control.errors.required\"><small>This field is required</small></div>\n    <div *ngIf=\"control.errors.email && control.touched\"><small>{{control.touched}}</small></div> -->\n    <!-- <div *ngIf=\"control.errors.unique\"><small>{{control.errors.unique}}</small></div>\n    <div *ngIf=\"control.errors.lessThen\"><small>{{control.errors.lessThen}}</small></div>\n    <div *ngIf=\"control.errors.greaterThan\"><small>{{control.errors.greaterThan}}</small></div>\n    \n    <div *ngIf=\"control.errors.mobile\"><small>{{control.errors.mobile}}</small></div>\n    <div *ngIf=\"control.errors.confirmPassword\"><small>{{control.errors.confirmPassword}}</small></div> -->\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}